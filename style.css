/* style.css */

:root {
  /* Farben */
  --primary-color: #1a1a1a;  /* Dunkleres Grau (fast Schwarz) */
  --secondary-color: #f0f0f0; /* Hellgrau */
  --text-color: #ddd;      /* Hellere Schrift (fast Weiß) */
  --accent-color: #00a5ff;  /* Blau (Akzentfarbe) */
  --track-color: #333;      /* Dunkelgrau für Spuren-Hintergrund */
  --track-highlight-color: #555; /* Etwas heller (für Hover/Fokus) */
  --selected-track-color: #777; /* Noch heller (für ausgewählte Spuren) */
  --cursor-color: #ff4444;  /* Rot (Abspielcursor) */
  --selection-color: rgba(0, 165, 255, 0.3); /* Hellblau, transparent */
  --button-bg-color: #444;  /* Dunkelgrau für Buttons */
  --button-hover-color: #666; /* Heller beim Hover */
  --error-color: #ff5555;  /* Rot für Fehler */
  --success-color: #4CAF50; /* Grün für Erfolg (z.B. "Gespeichert") */
  --warning-color: #ff9800; /* Orange für Warnungen */
  --scrollbar-thumb-color: #555; /* Farbe des Scrollbalken-Griffs */
  --scrollbar-track-color: #333; /* Farbe der Scrollbalken-Spur */

  /* Abstände */
  --spacing-xs: 4px;
  --spacing-s: 8px;
  --spacing-m: 16px;
  --spacing-l: 24px;
  --spacing-xl: 32px;

  /* Schriftgrößen */
  --font-size-base: 16px;
  --font-size-small: 14px;
  --font-size-large: 18px;

  /* Andere */
  --border-radius: 5px; /* Abrundungsradius für Elemente */
  --transition-speed: 0.2s; /* Für sanfte Übergänge */
}


body {
  font-family: 'Open Sans', sans-serif; /* Bevorzugte Schriftart */
  margin: 0; /* Keine Standardränder */
  background-color: var(--secondary-color);
  color: var(--text-color);
  line-height: 1.6;
}

/* Dark Mode (optional, mit JavaScript umschaltbar) */
body.dark-mode {
  background-color: var(--primary-color);
  /* color: var(--text-color);  <- Textfarbe muss hier *nicht* extra angepasst werden */
}

/* Container (optional, für Inhaltsbegrenzung) */
.container {
  max-width: 960px; /* Oder anderer Wert */
  margin: 0 auto;
  padding: 20px;
}

/* --- Header --- */

header {
  background-color: var(--primary-color);
  color: #fff;
  padding: 10px 0;
  text-align: center;
  border-bottom: 2px solid var(--accent-color);
}

h1,
h2 {
  font-size: 2em;
  margin-bottom: 10px;
  text-align: center;
}

h2 {
  color: var(--primary-color);
  /* Hervorhebung für Unterüberschriften */
}


/* --- Upload-Bereich --- */

.upload-buttons {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
  margin-bottom: 20px;
}

#file-upload {
  margin-bottom: 1rem;
}

/* Fortschrittsanzeige */
#upload-progress,
#export-progress {
  text-align: center;
  margin-top: 10px;
}

#upload-progress progress,
#export-progress progress {
  width: 80%;
  height: 20px;
  margin-bottom: 5px;
  border-radius: 10px;
}

/* Browser-spezifische Anpassungen für den Fortschrittsbalken */
#upload-progress progress::-webkit-progress-value,
#export-progress progress::-webkit-progress-value {
  border-radius: 10px;
  background-color: var(--accent-color);
}

#upload-progress progress::-moz-progress-bar,
#export-progress progress::-moz-progress-bar {
  border-radius: 10px;
  background-color: var(--accent-color);
}


/* --- Toolbar (oben im Editor) --- */

.toolbar {
  display: flex;
  align-items: center;
  justify-content: space-around;
  /* Gleichmäßig verteilen */
  gap: 10px;
  margin-bottom: 10px;
  flex-wrap: wrap;
  /* Zeilenumbruch bei kleinen Bildschirmen */
  padding: 10px;
  background-color: var(--secondary-color);
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  /* Dezenter Schatten */
}

.toolbar>div {
  display: flex;
  /* Elemente nebeneinander */
  align-items: center;
  /* Vertikal zentrieren */
  gap: 0.5rem;
  /* Kleinerer Abstand */
}

#concert-pitch {
  width: 4em;
  /* Etwas breiter */
}

/* --- Zeitleiste (Timeline) --- */

.timeline {
  background-color: var(--track-color);
  width: 100%;
  height: 200px;
  /* Anfangshöhe, anpassbar */
  overflow-x: auto;
  /* Horizontales Scrollen */
  margin-bottom: 10px;
  position: relative;
  /* Für absolute Positionierung */
  border-radius: 5px;
}


/* --- Spuren (Tracks) --- */

.track {
  background-color: var(--track-highlight-color);
  height: 50px;
  /* Höhe einer Spur */
  margin-bottom: 5px;
  position: absolute;
  /* Absolute Positionierung innerhalb der Zeitleiste */
  border-radius: 5px;
  cursor: pointer;
  user-select: none;
  display: flex; /* Inhalt zentrieren */
  align-items: center;
  justify-content: center;
  overflow: hidden; /* Inhalt, der über den Rand hinausragt, wird abgeschnitten. */
    transition: background-color 0.2s ease; /* Sanfter Übergang */
}
.track.selected {
  background-color: var(--selection-color);
  border: 2px solid var(--accent-color);
}
.track.dragging {
    opacity: 0.7;  /* Visuelles Feedback beim Ziehen */
    cursor: grabbing; /* Anderer Cursor */
}

/* --- Abspielcursor --- */
#cursor {
  position: absolute;
  top: 0;
  left: 0;
  width: 2px;
  height: 100%;
  background-color: var(--cursor-color);
  z-index: 10;  /* Über den Spuren */
  pointer-events: none; /* Klicks ignorieren */
  transition: left 0.1s linear; /* Sanfte Bewegung, KEIN "ease" */
}
/* --- Bereichsauswahl (Rechteck) --- */
.selection-box {
    position: absolute;
    border: 1px dashed var(--accent-color);
    background-color: var(--selection-color);
    z-index: 5;        /* Über den Spuren */
    pointer-events: none; /* Klicks ignorieren */
}


/* --- Bedienelemente (Play, Cut, etc.) --- */

.controls {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
  justify-content: center;
    flex-wrap: wrap; /* Buttons können umbrechen */
}

button {
  background-color: var(--button-bg-color);
  color: var(--text-color);
  border: none;
  padding: 10px 15px;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: background-color var(--transition-speed) ease;
  font-size: 1rem;
}

button:hover {
  background-color: var(--button-hover-color);
}
button:active{
  background-color: var(--accent-color);
}

/* --- Vorschau (Video/Audio) --- */

#preview {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 20px;

}

#video-preview, #audio-preview {
  max-width: 90%; /* An Container anpassen */
    margin: 1rem;
    border-radius: 5px;
     box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Dezenter Schatten */
}

/* --- Visualisierungs-Container --- */

#visuals-container {
    width: 100%;
    height: 200px; /* Feste Höhe */
    margin-bottom: 20px;
   position: relative;
}

#visuals-canvas {
    width: 100%;
    height: 100%;
    border-radius: 5px;
}
 .visuals-controls {
    position: absolute; /* Über dem Canvas */
    top: 10px;
    left: 10px;
    z-index: 10; /* Über dem Canvas */
    background-color: rgba(0, 0, 0, 0.5); /* Halbtransparent */
    padding: 5px;
    border-radius: 5px;
}

/* --- Spur-Einstellungen --- */

#track-controls {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 20px;
  background-color: var(--secondary-color);
  border-radius: var(--border-radius);
  padding: var(--spacing-m);
   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Dezenter Schatten */
}

.track-settings {
  margin-bottom: var(--spacing-s);
  display: flex;        /* Nebeneinander */
  align-items: center; /* Vertikal zentrieren */
  gap: var(--spacing-s);       /* Abstand */
  width: 100%;
  justify-content: space-between;
}

.track-settings label {
    flex: 1;             /* Label nimmt Platz ein */
    text-align: right;
    padding-right: var(--spacing-s);
}

.track-settings input[type="range"], .track-settings select{
    flex: 2; /* Mehr Platz für Slider */
     width: 100%;
    padding: 8px;
    border: 1px solid var(--track-color);
    border-radius: 4px; /* Abgerundete Ecken */
    box-sizing: border-box; /* Padding/Border in Breite einschließen */
}


/* --- Export-Bereich --- */

#export-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 20px;
    padding: 10px;
    background-color: var(--secondary-color);
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Dezenter Schatten */
}
#export-section select, #export-section label{
  margin: 0.5rem;
}
#export-video-format{
  margin-bottom: 1rem;
}

/* --- Footer --- */

footer {
    background-color: var(--primary-color);
    color: #fff;
    padding: 10px 0;
    text-align: center;
    border-top: 2px solid var(--accent-color);
}


/* --- Verbesserungen für Responsivität --- */

/* Kleinere Bildschirme (z.B. Smartphones) */
@media (max-width: 768px) {
    .toolbar {
        flex-direction: column; /* Buttons untereinander */
        align-items: stretch;  /* Volle Breite */
    }
    .toolbar > div{
      width: 100%;
      justify-content: space-between;
    }

    .controls {
        flex-direction: column; /* Buttons untereinander */
    }
     #track-controls {
        width: 95%; /* Etwas schmaler */
    }
    .track-settings {
        flex-direction: column; /* Label über Input */
        align-items: stretch; /* Volle Breite */
    }
    .track-settings label {
            text-align: center; /* Text zentriert */
            padding-right: 0;    /* Kein Abstand mehr */
        }
     .track-settings input[type="range"],  .track-settings select {
      flex: 1; /* Volle Breite */
     }
}
/* Verbesserte Scrollbalken (nur WebKit-Browser) */
::-webkit-scrollbar {
    width: 12px;  /* Breite des vertikalen Scrollbalkens */
    height: 12px; /* Höhe des horizontalen Scrollbalkens */
}

::-webkit-scrollbar-track {
    background: var(--scrollbar-track-color);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-thumb-color);
    border-radius: 10px;
    border: 3px solid var(--track-color); /* Rahmen, um Thumb hervorzuheben */
}

::-webkit-scrollbar-thumb:hover {
    background-color: var(--accent-color); /* Farbe beim Hover ändern */
}        }

        // 3. Verbinde alle Audiospuren mit dem OfflineAudioContext (und wende Effekte an!)
        for (const track of tracks) {
            if (track.type === 'audio' && track.audioBuffer) { // Nur Audiospuren, und stelle sicher, dass ein Buffer existiert
                // Erstelle einen BufferSourceNode für den Track
                const source = offlineContext.createBufferSource();
                source.buffer = track.audioBuffer; // Verwende den *originalen* AudioBuffer

                // Wende Effekte an (tiefe Kopie, um Original nicht zu verändern)
                const gainNode = offlineContext.createGain();
                const pannerNode = offlineContext.createStereoPanner();
                const filterNode = offlineContext.createBiquadFilter(); //Hinzugefügt

                // Verbinde die Nodes (in der richtigen Reihenfolge)
                source.connect(gainNode);
                gainNode.connect(pannerNode);
                pannerNode.connect(filterNode);
                filterNode.connect(offlineContext.destination);


                // Werte setzen (aus track.effectValues)
                gainNode.gain.value = track.effectValues.volume;
                pannerNode.pan.value = track.effectValues.panning;
                filterNode.type = track.effectValues.filterType;
                filterNode.frequency.value = track.effectValues.filterCutoff;

                // Berechne die Startzeit *relativ* zum Export-Startpunkt
                let trackStartTime = track.startTime - startTime;
                trackStartTime = Math.max(0, trackStartTime);      // Stelle sicher, dass sie nicht negativ ist

                // Starte die Wiedergabe der Spur zum richtigen Zeitpunkt
                source.start(trackStartTime);
            }
        }

        // 4. Rendere den OfflineAudioContext (asynchron!)
        return new Promise((resolve, reject) => {
            offlineContext.startRendering().then(async (renderedBuffer) => { // Rendern starten

                // 5. Konvertiere den gerenderten AudioBuffer in das gewünschte Format (WAV oder MP3)
                let audioBlob;
                if (format === 'wav') {
                    audioBlob = await audioBufferToBlob(renderedBuffer, 'audio/wav');
                } else if (format === 'mp3') {
                    // MP3-Encoding im Web Worker (LAMEjs)
                    audioWorker.postMessage({ type: 'encodeAudio', data: { audioBuffer: renderedBuffer, bitRate: parseInt(exportAudioBitrateSelect.value) } }); //bitRate

                    audioBlob = await new Promise((resolveWorker, rejectWorker) => { //auf Worker warten
                      audioWorker.onmessage = (event) => {
                        if (event.data.type === 'mp3Blob') {
                          resolveWorker(event.data.mp3Blob); // Bei Erfolg -> Promise auflösen
                        } else if (event.data.type === 'error') {
                          rejectWorker(new Error(event.data.message)); // Bei Fehler -> Promise ablehnen
                        }
                      };
                       audioWorker.onerror = (error) => { // Fehler im Worker abfangen
                            console.error("Worker error:", error);
                            rejectWorker(error); // Fehler weiterleiten
                        };
                    });

                } else {
                    reject(new Error('Ungültiges Audioformat')); // Fehler, falls ungültiges Format
                    return;
                }
              resolve(audioBlob);
            }).catch(reject); // Fehler beim Rendern abfangen
        });
    }

    // --- Export Image --- (Beispiel für aktuellen Frame)
    function exportImage(format) {
      const canvas = document.createElement('canvas');
      canvas.width = 1920; //  Auflösung, anpassen
      canvas.height = 1080;
      const ctx = canvas.getContext('2d');

      // Zeichne die *sichtbaren* Video- und Bildspuren auf das Canvas
      for (const track of tracks) {
        if ((track.type === 'video' || track.type === 'image') && track.mediaElement) {
          //Berechne die Zeit
          let currentTime = audioContext.currentTime;
          const trackStart = track.startTime;
          const trackEnd = track.startTime + track.duration;

          if (currentTime >= trackStart && currentTime <= trackEnd) { //Wenn Zeit im Track liegt
            // Einfache Zeichenoperation (ohne Zeitlogik, da es ein Standbild ist)
            ctx.drawImage(track.mediaElement, 0, 0, canvas.width, canvas.height); //Anpassen für Seitenverhältnis
          }
        }
      }

      // Canvas-Inhalt als Blob exportieren (JPEG oder PNG)
      const mimeType = format === 'jpeg' ? 'image/jpeg' : 'image/png';
      let quality = 0.9; //Qualität für jpeg
      if (format === 'jpeg') {
        return canvas.toBlob((blob) => {
          resolve(blob);
        }, mimeType, quality);
      } else {
        return canvas.toBlob((blob) => {
          resolve(blob);
        }, mimeType);
      }
    }

    // --- Speichern und Laden ---
    function saveProject() {
      const projectData = {
        tracks: tracks.map(track => ({ // Daten für jede Spur
          type: track.type,
          src: track.src,  // URL des Blobs (im Browser!)
          startTime: track.startTime,
          duration: track.duration,
          effectValues: track.effectValues, // *Alle* Effekte!
          audioBuffer: track.type === 'audio' ? { // Audiodaten *separat* speichern
            numberOfChannels: track.audioBuffer.numberOfChannels,
            length: track.audioBuffer.length,
            sampleRate: track.audioBuffer.sampleRate,
            channelData: Array.from({ length: track.audioBuffer.numberOfChannels }, (_, i) => Array.from(track.audioBuffer.getChannelData(i))),
          } : null, // Keine Audiodaten für Video/Bild
          muted: track.muted, //hinzugefügt
          solo: track.solo, //hinzugefügt
        })),
        concertPitch: concertPitch, // Globale Einstellungen
        zoomLevel: zoomLevel,
        snapToGrid: snapToGrid,
        // ... (weitere globale Einstellungen) ...
      };

      const projectJson = JSON.stringify(projectData);

      // Download anbieten (als .esproj Datei)
      const blob = new Blob([projectJson], { type: 'application/json' });
      const downloadLink = document.createElement('a');
      downloadLink.href = URL.createObjectURL(blob);
      downloadLink.download = 'echoel-project.esproj'; // .esproj als Dateiendung
      downloadLink.click();
      URL.revokeObjectURL(downloadLink.href); // URL wieder freigeben
    }

    async function loadProject(event) {
      const file = event.target.files[0];
      if (!file) {
        return;
      }
      if (file.name.split('.').pop() !== 'esproj') { //Dateiendung prüfen
        alert('Ungültiges Dateiformat. Bitte eine .esproj Datei auswählen.');
        return;
      }

      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          const projectData = JSON.parse(e.target.result);

          // 1. Alles zurücksetzen (wichtig!)
          clearTimeline();
          resetGlobalSettings();

          // 2. Globale Einstellungen wiederherstellen
          concertPitch = projectData.concertPitch || 440;
          concertPitchInput.value = concertPitch;
          zoomLevel = projectData.zoomLevel || 1;
          snapToGridCheckbox.checked = projectData.snapToGrid || false;

          // 3. Spuren wiederherstellen (asynchron, da Blobs geladen werden müssen)
          const loadPromises = projectData.tracks.map(trackData => {
            return getBlobFromUrl(trackData.src) // Blob laden
              .then(blob => {
                if (!blob) {
                  console.error("Blob konnte nicht wiederhergestellt werden:", trackData.src);
                  // Fehlerbehandlung: Benutzer informieren, Datei neu auswählen lassen, etc.
                  return; // Fehler, aber weiter mit den anderen Spuren
                }

                // Erstelle ein File-Objekt aus dem Blob (für Kompatibilität mit addMediaToTimeline)
                const file = new File([blob], "media-file", { type: blob.type });

                // Füge die Spur hinzu *ohne* erneutes Laden der Metadaten (die sind ja schon in trackData)
                if (trackData.type === 'audio') {
                  // Erstelle AudioBuffer *synchron* aus den gespeicherten Daten (falls vorhanden)
                  let audioBuffer = null;
                  if (trackData.audioBuffer) {
                    audioBuffer = audioContext.createBuffer(
                      trackData.audioBuffer.numberOfChannels,
                      trackData.audioBuffer.length,
                      trackData.audioBuffer.sampleRate
                    );
                    for (let i = 0; i < trackData.audioBuffer.numberOfChannels; i++) {
                      audioBuffer.getChannelData(i).set(trackData.audioBuffer.channelData[i]);
                    }
                  }
                  addMediaToTimeline(file, 'audio', audioBuffer, trackData);
                } else {
                  addMediaToTimeline(file, trackData.type, null, trackData); // Kein AudioBuffer für Video/Bild
                }
              });
          });

          // Warten, bis *alle* Spuren geladen wurden
          Promise.all(loadPromises).then(() => {

            updateZoom();  // Zoom anpassen
            updateTrackControls(); // Zeige die Einstellungen der ersten ausgewählten Spur an
            editorSection.style.display = 'block'; // Editor-Sektion anzeigen
            exportSection.style.display = 'block';
          });
          //Fehler fangen
        } catch (error) {
          console.error("Fehler beim Laden des Projekts:", error);
          alert("Fehler beim Laden des Projekts. Die Datei ist möglicherweise beschädigt oder hat ein ungültiges Format.");
        }
      };
      reader.readAsText(file); // JSON-Datei als Text lesen
    }

    // Hilfsfunktion: Timeline leeren, bevor ein neues Projekt geladen wird
    function clearTimeline() {
      //DOM-Elemente entfernen
      audioTracksContainer.innerHTML = '';
      videoTracksContainer.innerHTML = '';
      imageTracksContainer.innerHTML = '';


      // Wavesurfer-Instanzen zerstören
      for (const trackId in wavesurferInstances) {
        if (wavesurferInstances.hasOwnProperty(trackId)) {
          wavesurferInstances[trackId].destroy();
        }
      }
      wavesurferInstances = {};

      // URLs freigeben (Speicherleck verhindern!)
      for (const track of tracks) {
        URL.revokeObjectURL(track.src);
      }

      tracks = []; //Tracks leeren
      currentTrackId = 0; // ID zurücksetzen
      selectedTracks = []; //Auswahl leeren
    }

    // Hilfsfunktion: Globale Einstellungen zurücksetzen
    function resetGlobalSettings() {
      concertPitch = 440;
      concertPitchInput.value = concertPitch;
      zoomLevel = 1;
      snapToGridCheckbox.checked = false;
      // ... (weitere Einstellungen) ...
    }

    // --- Teilen von Projekten ---
    function shareProject() {
      // Speichere das Projekt (genau wie in saveProject())
      const projectData = {
        tracks: tracks.map(track => ({
          type: track.type,
          src: track.src, // URL des Blobs im Browser
          startTime: track.startTime,
          duration: track.duration,
          effectValues: track.effectValues, // Speichere *alle* Effekte!
          audioBuffer: track.type === 'audio' ? { // Speichere AudioBuffer-Daten *separat*
            numberOfChannels: track.audioBuffer.numberOfChannels,
            length: track.audioBuffer.length,
            sampleRate: track.audioBuffer.sampleRate,
            channelData: Array.from({ length: track.audioBuffer.numberOfChannels }, (_, i) => Array.from(track.audioBuffer.getChannelData(i))),
          } : null, // Keine Audiodaten für Video/Bild
          muted: track.muted, //hinzugefügt
          solo: track.solo, //hinzugefügt
        })),
        concertPitch: concertPitch,
        zoomLevel: zoomLevel,
        snapToGrid: snapToGrid,
        // ... (weitere globale Einstellungen) ...
      };

      const projectJson = JSON.stringify(projectData);

      // Erstelle einen Blob aus den JSON-Daten.
      const blob = new Blob([projectJson], { type: 'application/json' });

      // Erstelle eine temporäre URL für den Blob.
      const url = URL.createObjectURL(blob);

      // Erstelle einen Link, der die URL als Parameter enthält.
      const shareLink = window.location.origin + window.location.pathname + '?project=' + encodeURIComponent(url);

      // Kopiere den Link in die Zwischenablage.
      navigator.clipboard.writeText(shareLink).then(() => {
        alert('Projekt-Link in die Zwischenablage kopiert. Teile diesen Link, um das Projekt zu laden.');
      }).catch(err => {
        console.error('Fehler beim Kopieren in die Zwischenablage:', err);
        alert('Fehler beim Kopieren des Links. Bitte manuell kopieren.'); // Bessere Fehlermeldung
        // Optional: Link in einem Textfeld anzeigen, damit der Benutzer ihn manuell kopieren kann.
      });
      // URL.revokeObjectURL(url); // WICHTIG: URL wieder freigeben! Funktioniert hier nicht, da asynchron

    }


    // --- Laden von Projekten über URL-Parameter ---

    function loadProjectFromUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      const projectUrl = urlParams.get('project');

      if (projectUrl) {
        fetch(projectUrl) // URL abrufen (Cross-Origin beachten!)
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`); // Fehlerbehandlung
            }
            return response.json();
          })
          .then(projectData => {
            //Verarbeite die Projektdaten, stelle Spuren wieder her usw.
            clearTimeline();  // Setze den Editor zurück
            resetGlobalSettings(); // Globale Einstellungen zurücksetzen

            // Stelle die globalen Einstellungen wieder her
            concertPitch = projectData.concertPitch || 440;
            concertPitchInput.value = concertPitch;
            zoomLevel = projectData.zoomLevel || 1;
            snapToGridCheckbox.checked = projectData.snapToGrid || false;

            // Lade die Spuren (asynchron, da Blobs geladen werden)
            const loadPromises = projectData.tracks.map(trackData => {
              return getBlobFromUrl(trackData.src) // Blob laden
                .then(blob => {
                  if (!blob) {
                    console.error("Blob konnte nicht wiederhergestellt werden:", trackData.src);
                    // Fehlerbehandlung: Benutzer informieren, Datei neu auswählen lassen, etc.
                    return; // Fehler, aber weiter mit den anderen Spuren
                  }

                  // Erstelle ein File-Objekt aus dem Blob (für Kompatibilität mit addMediaToTimeline)
                  const file = new File([blob], "media-file", { type: blob.type });

                  // Füge die Spur hinzu *ohne* erneutes Laden der Metadaten (die sind ja schon in trackData)
                  if (trackData.type === 'audio') {
                    // Erstelle AudioBuffer *synchron* aus den gespeicherten Daten (falls vorhanden)
                    let audioBuffer = null;
                    if (trackData.audioBuffer) {
                      audioBuffer = audioContext.createBuffer(
                        trackData.audioBuffer.numberOfChannels,
                        trackData.audioBuffer.length,
                        trackData.audioBuffer.sampleRate
                      );
                      for (let i = 0; i < trackData.audioBuffer.numberOfChannels; i++) {
                        audioBuffer.getChannelData(i).set(trackData.audioBuffer.channelData[i]);
                      }
                    }
                    addMediaToTimeline(file, 'audio', audioBuffer, trackData);
                  } else {
                    addMediaToTimeline(file, trackData.type, null, trackData); // Kein AudioBuffer für Video/Bild
                  }
                });
            });

            // Warten, bis *alle* Spuren geladen wurden
            Promise.all(loadPromises).then(() => {

              updateZoom();  // Zoom anpassen
              updateTrackControls(); // Zeige die Einstellungen der ersten ausgewählten Spur an
              editorSection.style.display = 'block';// Editor-Sektion anzeigen
              exportSection.style.display = 'block';
            });
          })
          .catch(error => { // Fehlerbehandlung
            console.error("Fehler beim Laden des Projekts von URL:", error);
            alert("Fehler beim Laden des Projekts von der URL.");
          });
      }
    }

    // --- Initialisierung der Export-Optionen ---
    //Dropdown Menü
    function initializeExportOptions() {
      // Auflösungen (Beispiele)
      const resolutions = [
        { width: 1280,



